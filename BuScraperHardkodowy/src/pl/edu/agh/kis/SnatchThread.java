package pl.edu.agh.kis;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Map;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.tidy.Tidy;
import org.xml.sax.SAXException;

/**
 * Klasa w¹tków, których zadaniem jest wyodrêbnienie zawartoœci ze strony, która znajduje
 * siê ju¿ w buforze, metod tej klasy nie interesuje pochodzenie stron, a jedynie to za
 * pomoc¹ jakich wyra¿eñ XPath ma dobraæ siê do elementów, które musi wyodrêbniæ, posiada 
 * obiekt implementuj¹cy interfejs StoreBusInfo, do którego oddelegowuje obowi¹zek 
 * zesk³adowania wyodrêbnionych informacji, posiada równie¿ swój w³asny system logów, 
 * z wyjœciem do pliku o nazwie równej id dzia³aj¹cego w¹tku.
 * @author Szymon Majkut
 * @version %I%, %G%
 *
 */
public class SnatchThread extends Thread {
	
	/**
	 * System Log4J
	 */
	private static final Logger log4j = LogManager.getLogger(SnatchThread.class.getName());
	
	/**
	 * Unikatowy numer przyporz¹dkowany danemu w¹tkowi
	 */
	private int threadId;
	
	/**
	 * Zestaw wyra¿eñ XPath, z których bêdziemy korzystaæ
	 * W tej wersji programu, powinniœmy otrzymaæ szeœæ wyra¿eñ, w kolejnoœci: pierwsze
	 * odpowiada za numer linii, druga za nazwê przystanku, trzecia za godzinê, czwarta
	 * za minuty dnia powszedniego, pi¹ta sobotê, a szósta niedzieli
	 */
	private HashMap<String,String> xPathExpressions;
	
	/**
	 * Referencja do bufora przechowuj¹cego strony do przetworzenia
	 */
	private PagesBuffer pagesToAnalise;
	
	/**
	 * Obiekt odpowiedzialny za sk³adowanie informacji zdobytych przez analiseXMLPage
	 * ka¿dy w¹tek posiada swój unikatowy
	 */
	private StoreBusInfo infoSaving;
	
	/**
	 * Obiekt przechowuj¹cy aktualnie przetwarzan¹ stronê
	 */
	private String currentPage;
	
	/**
	 * Funkcja s³u¿y do przetworzenia stron zapisanych w jêzyku HTML na dokument XML przy
	 * u¿yciu pakietu JTidy, wykorzystuj¹c do tego dwie tablice bitów, potrzebne dla 
	 * funkcji parse z klasy Tidy, zapisuj¹c wynik tej operacji ze strumienia odpowiadaj¹cego
	 * za strumieñ wyjœcia funkcji, do przygotowanego String'a. Wynik jest jeszcze opakowywany
	 * przez znaczniki <myroot></myroot> w celu uchronienia siê przed wynikiem przetwarznia,
	 * w którym nie istnia³by jeden korzeñ, co mo¿e siê zdarzyæ przy specyficznie zbudowanych
	 * stronach HTML.
	 * @param pageHTML pe³ny kod Ÿród³owy HTML strony, któr¹ bêdziemy przetwarzaæ
	 * @return pe³ny kod Ÿród³owy strony przetworzony do formy zgodnej z XML
	 */
	private String prepareXMLPage(String pageHTML)
	{		
		String result = "";	
		Tidy tidy = new Tidy();
		tidy.setInputEncoding("UTF-8");
	    tidy.setOutputEncoding("UTF-8");
	    tidy.setWraplen(Integer.MAX_VALUE);
	    tidy.setPrintBodyOnly(true);
	    tidy.setXmlOut(true);
	    tidy.setSmartIndent(true);
	    tidy.setQuiet(true);
	    tidy.setShowErrors(0);
	    tidy.setShowWarnings(false);
	    tidy.setForceOutput(true);
	    
		try (ByteArrayInputStream inputStream = 
				new ByteArrayInputStream(pageHTML.getBytes("UTF-8"));
				ByteArrayOutputStream outputStream = new ByteArrayOutputStream())
		{
		    tidy.parseDOM(inputStream, outputStream);
			result = outputStream.toString("UTF-8");
			log4j.info("Utworzy³em dokument XHTML z dokumentu HTML");
		} catch (UnsupportedEncodingException e) {
			log4j.error("B³¹d kodowania:"+e.getMessage());
		} catch (IOException e) {
			log4j.error("B³¹d wejœcia/wyjœcia:"+e.getMessage());
		}
		
		StringBuilder builder = new StringBuilder();
		builder.append("<myroot>");
		builder.append(result);
		builder.append("</myroot>");

		return builder.toString();
	}
	
	/**
	 * Funkcja odpowiedzialna jest za wyodrêbnienie przydatnych informacji 
	 * z pe³nego kodu Ÿród³owego strony przy pomocy przechowywanych XPath, 
	 * oraz zwrócenie wyniku wyodrêbnienia zesk³adowanego w mapie
	 * @param pageXHTML kod Ÿród³owy strony w formacie XHTML
	 * @return mapa wyodrêbnionych danych
	 */
	private Map<String,String> analiseXMLPage(String pageXHTML) {
		
		//Wiemy ¿e kluczami musz¹ byæ direction, lineNumber, buStopName, hours
		
		//Przygotowujê zmienne, do przechowywania wyodrêbnionych informacji
		Map<String,String> results = new HashMap<String,String>();
		String direction = "";
		String lineNumber = "";
		String buStopName = "";
		String hours = "";
		StringBuilder buildHours = new StringBuilder();
		
		try {

		    DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
		    DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
		    Document docXML = docBuilder.
		    		parse(new ByteArrayInputStream(pageXHTML.getBytes("UTF-8")));
		    
		    XPath xPath =  XPathFactory.newInstance().newXPath();
 		    
		    //Tutaj wyci¹gamy pojedyncze String nazwy linii, przystanku i kierunku
		  
		    buStopName = xPath.compile(xPathExpressions.get("buStopName")).
		    		evaluate(docXML).replaceAll("\\s","");
		   
		    lineNumber = xPath.compile(xPathExpressions.get("lineNumber")).
		    		evaluate(docXML).replaceAll("\\s","");
		    
		    direction = xPath.compile(xPathExpressions.get("direction"))
		    		.evaluate(docXML).replaceAll("\\s","");
		    
		    //Tutaj bêdziemy wyci¹gaæ ca³e wiersze, aby wyci¹gn¹æ z nich nastêpnie odpowiednie czasy
		    NodeList hourss = (NodeList) xPath.compile(xPathExpressions.get("hours")).
		    		evaluate(docXML, XPathConstants.NODESET);
		    		    
		    //Przelatujê po wszystkich linijkach pasuj¹cych do XPath
		    for (int i = 0;null!=hourss && i < hourss.getLength(); ++i) 
		    {
	    		Node nod = hourss.item(i);
	    		if(nod.getNodeType() == Node.ELEMENT_NODE)
	    		{
	    			String tmpTimes = "";
	    			if(!(tmpTimes = nod.getTextContent()).equals(""))
	    			{
	    				buildHours.append(tmpTimes);
	    			}
	    		}
	    	}
		    
		    hours = buildHours.toString();
		    
		    log4j.info("Wyodrêbni³em informacje ze strony XHTML");
		} catch (SAXException e) {
			log4j.error("Problem przy analizowaniu dokumentu XHTML:"+e.getMessage());
		} catch (ParserConfigurationException e) {
			log4j.error("Problem przy analizowaniu dokumentu XHTML:"+e.getMessage());			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			log4j.error("Problem przy analizowaniu dokumentu XHTML:"+e.getMessage());			e.printStackTrace();
		} catch (XPathExpressionException e) {
			log4j.error("Problem przy analizowaniu dokumentu XHTML:"+e.getMessage());			e.printStackTrace();
		} catch (IOException e) {
			log4j.error("Problem przy analizowaniu dokumentu XHTML:"+e.getMessage());			e.printStackTrace(); 
		}
		
		results.put("lineNumber", lineNumber);
		results.put("direction", direction);
		results.put("buStopName", buStopName);
		results.put("hours", hours);
		
		return results;
	}
	/**
	 * G³ówna pêtla w¹tku - konsumenta, jej zadaniem jest pobieranie strony z bufora, oraz 
	 * wœród zawartych na niej danych, wyodrêbnienie danych pasuj¹cych do posiadanych przez
	 * w¹tek wyra¿eñ XPath oraz pózniejsze zesk³adowanie ich, oddelegowuj¹c zadanie do
	 * odpowiedniego obiektu implementuj¹cego interfejs StoreBusInfo, w przypadku pustego
	 * Bufora, maj¹ zostaæ obudzone w¹tki pobieraj¹ce.
	 */
	public void run()
	{	
		BuScrapper.numberOfWorkingSnatchThreads.incrementAndGet();

		do
		{
			if(!pagesToAnalise.isEmpty())
			{
				try {
					currentPage = pagesToAnalise.takePage();
					log4j.info("Pobieram z kolejki stron");
				} catch (InterruptedException e) {
					log4j.error("W¹tek niepoprawnie wybudzony:"+e.getMessage());
				} finally {
					if(currentPage == null)
					{
						continue;
					}
				}
				log4j.info("Pobra³em z kolejki stron");
				infoSaving.storeInfo(analiseXMLPage(prepareXMLPage(
						currentPage)));
				log4j.info("Strona zosta³a przetworzona");
			}
			else
			{
				log4j.info("Kolejka pusta, usypiamy w oczekiwaniu na producenta.");
				try {
					sleep(5000);
					yield();
				} catch (InterruptedException e) {
					log4j.error("W¹tek niepoprawnie wybudzony:"+e.getMessage());
				}
			}
				
		}while((BuScrapper.numberOfWorkingDownloadThreads.intValue() > 0 
				|| !pagesToAnalise.isEmpty()) );
		 
		BuScrapper.numberOfWorkingSnatchThreads.decrementAndGet();
		log4j.info("SnatchThread o id "+threadId+" koñczy pracê!");
	}
	
	/**
	 * Konstruktor sparametryzowany, którego znaczenie polega na tym, aby ka¿dy nowo
	 * utworzony w¹tek przetwarzaj¹cy, posiada³ unikatow¹ nazwê, któr¹ bêdziemy wykorzystywaæ
	 * w systemie logów, mia³ te¿ dostêp do bufora z kolejnymi pobranymi stronami, oraz 
	 * podarowany przez w¹tek nadrzêdny obiekt, któremu bêdzie delegowa³ sk³adowanie 
	 * uzyskanych danych.
	 * @param id unikatowy numer, przyznawany jeszcze w czasie tworzenia w¹tków w w¹tku
	 *        nadrzêdnym
	 * @param pagesToAnalise bufor stron, zapewniaj¹cy blokowanie udostêpnianych przez 
	 *        siebie metod
	 * @param infoSaving obiekt odpowiedzialny za zes³adowanie danych
	 * @param xPathExpressions mapa wyra¿eñ XPath wykorzystywanych przy wyodrêbnianiu
	 *        danych
	 */
	SnatchThread(int id, PagesBuffer pagesToAnalise, StoreBusInfo infoSaving,
			HashMap<String,String> xPathExpressions)
	{
		threadId = id;
		this.pagesToAnalise = pagesToAnalise;
		this.infoSaving = infoSaving;
		this.xPathExpressions = xPathExpressions;
		log4j.info("SnatchThread o id "+threadId+" rozpoczyna pracê!");
		StringBuilder regexs = new StringBuilder();
		for(String s : xPathExpressions.keySet())
		{
			regexs.append(s);
		}
		log4j.info("Otrzyma³em œcie¿ki XPath:"+regexs.toString());
	}
}
